//Copyright © 2016 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.//#define ENABLE_ANALYTICS //Enable this to allow OZOPlayerSDK to gather analytics data from the player instance//#define ENABLE_DEBUG#if (UNITY_IOS || UNITY_ANDROID) && !UNITY_EDITOR#define UNITY_GLES_RENDERER#endif#if UNITY_EDITORusing UnityEditor;#endifusing UnityEngine;using UnityEngine.UI;using System;using System.Collections;using System.Runtime.InteropServices;namespace OZO{    public enum VideoPlaybackState    {        INVALID = -1,      /// Invalid enum        IDLE,              /// Video playback is idle, no file has been loaded        LOADING,           /// Loading a video is in progress        PAUSED,            /// Video playback is paused        BUFFERING,         /// Video playback is buffering, not used currently        PLAYING,           /// Video playback is in progress        END_OF_FILE,       /// Video has reached the end of the file or stream        CONNECTION_ERROR,  /// Connection error, not currently used        STREAM_ERROR,      /// Stream error, not currently used        COUNT              /// Enum max value    };    public enum ErrorCodes    {        OK = 0,                      /// Operation succeeded normally        NO_CHANGE,                   /// Operation didn't have an effect        END_OF_FILE,                 /// End of file has been reached        FILE_PARTIALLY_SUPPORTED,    /// The file was opened but only part of the contents can be played        // generic errors        OUT_OF_MEMORY = 100,         /// Operation failed due to lack of memory        OPERATION_FAILED,            /// Generic failure        // state errors        INVALID_STATE = 200,         /// Operation was not due to invalid state        ITEM_NOT_FOUND,              /// Operation failed due to a missing item        BUFFER_OVERFLOW,             /// Buffer has overflown        // input not accepted        NOT_SUPPORTED = 300,         /// Action or file is not supported        INVALID_DATA,                /// Data is invalid        // operational errors        FILE_NOT_FOUND = 400,        /// File was not found        FILE_OPEN_FAILED,            /// The file was found but it can't be accessed        FILE_NOT_SUPPORTED,          /// The file is an MP4 but in incorrect format        NETWORK_ACCESS_FAILED,       /// Failed to access network        COUNT    };    //This used internally by the API to get events properly synced with the render thread    enum RenderEvent    {        GFX_INIT = 0,        GFX_RENDER,        GFX_STATE_UPDATE,        GFX_MAX_EVENTS    };    public enum Feature    {        INVALID = -1,   /// Invalid enum        HEVC,           /// H265 / HEVC support        DEPTH,          /// Depth data        UHD_PER_EYE,    /// 4k per eye        COUNT,          /// Enum max value    };    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]    public delegate void PlaybackObserverDelegate(OZO.VideoPlaybackState state);}public interface IOZOPlayer{    //Init has to be called from Awake(), analytics and watermark might not have effect, depending on the license    bool Init(string licenseId, bool useAnalytics, bool useWatermark, bool allowExclusiveModeAudio);    string GetVersion();    bool IsFeatureSupported(OZO.Feature feature);    event OZO.PlaybackObserverDelegate OnPlayModeChanged;    OZO.VideoPlaybackState GetCurrentVideoPlaybackState();    OZO.ErrorCodes GetLastError();    bool LoadVideo(string filepath);    bool PlayLoaded();    void Pause();    void Resume();    void Stop();    bool IsSeekable();    bool SeekTo(UInt64 milliSeconds);    UInt64 ElapsedTime();    UInt64 Duration();    void SetAudioGain(float gain);    void SetViewRotationOffset(Quaternion rotation);    void SetProjectionMatrix(Matrix4x4 m, int eyeIdx);    void SetEyeDistance(float distanceBetweenEyes);    void SetVisible(bool visible);    void SetMonoscopicRendering(bool monoscopic);}/// <summary>/// The interface to the OZO Player SDK/// </summary>public class OZOPlayer : MonoBehaviour, IOZOPlayer{    public event OZO.PlaybackObserverDelegate OnPlayModeChanged;    //SDK properties    private Quaternion rotationOffset = Quaternion.identity;    OZO.VideoPlaybackState currentState = OZO.VideoPlaybackState.INVALID;    //View    public Material OZOCameraMaterial;    private int width = -1;    private int height = -1;    private IntPtr renderFunc = IntPtr.Zero;    private bool camerasCreated = false;    private bool initializeRequested = false;    private bool initialized = false;    private Camera[] OZOViewCameras; //< eye camera root game objects    private OZORender[] OZOViewRenderer;    private OZOInitInfo initInfo;    //////////////////////////////////////////////////////////////////////////////    /// Interface    //////////////////////////////////////////////////////////////////////////////    public bool Init(string licenseId, bool useAnalytics, bool useWatermark, bool allowExclusiveModeAudio)    {        bool res = false;        if (licenseId == "INSERT_YOUR_OZO_LICENSE_ID_HERE")        {            Debug.LogError("OZOPlayerSDK - Init failure, please give a valid license id for Init().\n");#if UNITY_EDITOR            EditorUtility.DisplayDialog("License ID missing", "Please give a valid license id to initialize the OZO Player SDK", "Ok");            UnityEditor.EditorApplication.isPlaying = false;#endif        }        else        {#if ENABLE_DEBUG            Debug.Log("OZOPlayerSDK - Initializing\n");#endif            CreateUnityOZOCameras();            InitProjections();#if ENABLE_DEBUG            Debug.Log("OZOPlayerSDK - Initialize SDK\n");#endif            InitializeSDK(licenseId, useAnalytics, useWatermark, allowExclusiveModeAudio);            initializeRequested = false;            res = true;        }        return res;    }    public string GetVersion()    {        return OZO_GetVersionNumber();    }    public bool IsFeatureSupported(OZO.Feature feature)    {        return OZO_IsFeatureSupported(feature);    }    public bool IsInitialized()    {        return OZO_IsInitialized();    }    public OZO.VideoPlaybackState GetCurrentVideoPlaybackState()    {        return OZO_GetCurrentVideoPlaybackState();    }    public OZO.ErrorCodes GetLastError()    {        return OZO_GetLastError();    }    public bool LoadVideo(string filepath)    {        return OZO_LoadVideo(filepath);    }    public bool PlayLoaded()    {        return OZO_PlayLoaded();    }    public void Pause()    {        OZO_Pause();    }    public void Resume()    {        OZO_Resume();    }    public void Stop()    {        OZO_Stop();    }    public bool IsSeekable()    {        return OZO_IsSeekable();    }    public bool SeekTo(UInt64 milliSeconds)    {        return OZO_SeekTo(milliSeconds);    }    public UInt64 ElapsedTime()    {        return OZO_ElapsedTime();    }    public UInt64 Duration()    {        return OZO_Duration();    }    public void SetAudioGain(float gain)    {        OZO_SetAudioGain(gain);    }    public void SetViewRotationOffset(Quaternion rotation)    {        rotationOffset = rotation;    }    public void SetProjectionMatrix(Matrix4x4 m, int eyeIdx)    {        float[] projectionMatrix =        {                m.m00, m.m01, m.m02, m.m03,                m.m10, m.m11, m.m12, m.m13,                m.m20, m.m21, m.m22, m.m23,                m.m30, m.m31, m.m32, m.m33            };        OZO_SetProjectionMatrix(projectionMatrix, eyeIdx);    }    public void SetEyeDistance(float distanceBetweenEyes)    {        OZO_SetEyeDistance(distanceBetweenEyes * 0.5f, 0);        OZO_SetEyeDistance(distanceBetweenEyes * 0.5f, 1);    }    public void SetVisible(bool visible)    {        if (camerasCreated)        {            OZOViewCameras[0].enabled = visible;            OZOViewCameras[1].enabled = visible;            OZOViewRenderer[0].renderingEnabled = visible;            OZOViewRenderer[1].renderingEnabled = visible;        }    }    public void SetMonoscopicRendering(bool monoscopic)    {        if (camerasCreated)        {            //disabled for now (needs proper sdk support)            if (monoscopic)            {            }        }    }    //////////////////////////////////////////////////////////////////////////////    /// Unity Scene    //////////////////////////////////////////////////////////////////////////////    private void OnDestroy()    {        //Clear the Unity data        OZOViewRenderer = null;        OZOViewCameras = null;#if ENABLE_DEBUG        Debug.Log("Freeing\n");#endif        OZO_DeinitSDK();#if ENABLE_DEBUG        Debug.Log("Freed\n");#endif    }    private void Update()    {        if (IntPtr.Zero != renderFunc)        {            if (initialized)            {                UpdatePlaybackMode();                UpdateHMD(Time.timeSinceLevelLoad, UnityEngine.VR.InputTracking.GetLocalRotation(UnityEngine.VR.VRNode.Head));                GL.IssuePluginEvent(renderFunc, (int)OZO.RenderEvent.GFX_STATE_UPDATE);                GL.IssuePluginEvent(renderFunc, (int)OZO.RenderEvent.GFX_RENDER);            }            else if (!initializeRequested)            {                initializeRequested = true;                //on certain platforms the initialization needs to be synchronized with the rendering                GL.IssuePluginEvent(renderFunc, (int)OZO.RenderEvent.GFX_INIT);            }            //cache the initialization info            else if (IsInitialized())            {                initialized = true;                Matrix4x4 m0 = OZOViewCameras[0].GetStereoProjectionMatrix(Camera.StereoscopicEye.Left);                Matrix4x4 m1 = OZOViewCameras[1].GetStereoProjectionMatrix(Camera.StereoscopicEye.Right);                //now initialized and ready to set the projection matrices                SetProjectionMatrix(m0.transpose, 0);                SetProjectionMatrix(m1.transpose, 1);                SetEyeDistance(OZOViewCameras[0].stereoSeparation);                if (!UnityEngine.VR.VRSettings.enabled)                {                    float width = Screen.width;                    float height = Screen.height;                    Matrix4x4 m = Matrix4x4.Perspective(90.0f, width / height, OZOViewCameras[0].nearClipPlane, OZOViewCameras[0].farClipPlane).transpose;                    SetProjectionMatrix(m, 0);                    SetProjectionMatrix(m, 1);                }            }        }    }    public void UpdatePlaybackMode()    {        if (OnPlayModeChanged != null)        {            OZO.VideoPlaybackState state = OZO_PopCachedVideoPlaybackState();            if (state != currentState)            {                currentState = state;                OnPlayModeChanged(currentState);            }        }    }    private void UpdateHMD(float time, Quaternion orientation)    {        OZO_SetTime(Time.timeSinceLevelLoad);        Quaternion q = rotationOffset * orientation;        OZO_SetHMDOrientation(-q.x, -q.y, q.z, q.w);    }    /// <summary>    /// Dynamically generates the stereoscopic cameras, textures and projection.    /// </summary>    private void CreateUnityOZOCameras()    {        if (!camerasCreated)        {            OZOViewRenderer = new OZORender[2];            OZOViewCameras = new Camera[2];            for (int i = 0; i < 2; ++i)            {                string cameraName = "OZOEye" + ((0 == i) ? "Left" : "Right");                if (transform.Find(cameraName))                {                    continue;                }                GameObject camObject = new GameObject(cameraName);                OZOViewCameras[i] = camObject.AddComponent<Camera>();                OZOViewCameras[i].nearClipPlane = 0.01f;                OZOViewCameras[i].farClipPlane = 100.0f;                OZOViewCameras[i].depthTextureMode = DepthTextureMode.Depth;                OZOViewCameras[i].useOcclusionCulling = true;                OZOViewCameras[i].stereoTargetEye = (0 == i) ? StereoTargetEyeMask.Left : StereoTargetEyeMask.Right;                camObject.transform.SetParent(transform);                OZOViewCameras[i].depth = 0;                OZOViewCameras[i].clearFlags = CameraClearFlags.Color;                OZOViewCameras[i].cullingMask = 0;                OZOViewRenderer[i] = camObject.AddComponent<OZORender>();            }            camerasCreated = true;        }    }    private void InitProjections()    {        //initialize projection        if (UnityEngine.VR.VRSettings.enabled)        {            width = OZOViewCameras[0].pixelWidth;            height = OZOViewCameras[0].pixelHeight;            if (width != OZOViewCameras[1].pixelWidth || height != OZOViewCameras[1].pixelHeight)            {                Debug.Log("Error: Mismatching camera sizes\n");            }        }        else        {            width = Screen.width;            height = Screen.height;        }    }    private IntPtr GetRenderFunc()    {        return OZO_GetRenderEventFunc();    }    private void InitializeSDK(string licenseId, bool useAnalytics, bool useWatermark, bool allowExclusiveModeAudio)    {#if ENABLE_DEBUG        Debug.Log("InitializeSDK: [AnalyticsEnabled:" + useAnalytics.ToString() + "]\n");#endif        {            for (int i = 0; i < 2; ++i)            {                OZOViewRenderer[i].material = new Material(OZOCameraMaterial);                OZOViewRenderer[i].renderTexture = new RenderTexture(width, height, 0, RenderTextureFormat.Default, RenderTextureReadWrite.Linear);                OZOViewRenderer[i].renderTexture.Create();                OZOViewRenderer[i].renderTextureDepth = new RenderTexture(width, height, 16, RenderTextureFormat.Depth, RenderTextureReadWrite.Linear);                OZOViewRenderer[i].renderTextureDepth.Create();                OZOViewRenderer[i].material.SetTexture("_MainTex", OZOViewRenderer[i].renderTexture);                OZOViewRenderer[i].material.SetTexture("_DepthTex", OZOViewRenderer[i].renderTextureDepth);                OZOViewRenderer[i].eyeDiff = OZOViewCameras[i].stereoSeparation * ((0 == i) ? 0.5f : -0.5f);            }            initInfo = new OZOInitInfo();            initInfo.texturePtr0 = OZOViewRenderer[0].renderTexture.GetNativeTexturePtr();            initInfo.texturePtr1 = OZOViewRenderer[1].renderTexture.GetNativeTexturePtr();            initInfo.depthTexturePtr0 = OZOViewRenderer[0].renderTextureDepth.GetNativeDepthBufferPtr();            initInfo.depthTexturePtr1 = OZOViewRenderer[1].renderTextureDepth.GetNativeDepthBufferPtr();#if ENABLE_DEBUG            Debug.Log("InitInfo: tex1: " + initInfo.texturePtr0 + " tex2:" + initInfo.texturePtr1 + "\n");            Debug.Log("InitInfo: dtex1: " + initInfo.depthTexturePtr0 + " dtex2:" + initInfo.depthTexturePtr1 + "\n");#endif            initInfo.width = width;            initInfo.height = height;            initInfo.storagePath = Application.persistentDataPath;#if (UNITY_ANDROID && !UNITY_EDITOR)            Debug.Log("InitInfo: Android\n");            AndroidJavaClass jc = new AndroidJavaClass("com.unity3d.player.UnityPlayer");            AndroidJavaObject jo = jc.GetStatic<AndroidJavaObject>("currentActivity");            AndroidJavaObject assetManager = jo.Call<AndroidJavaObject>("getAssets");            initInfo.activity = jo.GetRawObject();            initInfo.assetManager = assetManager.GetRawObject();            initInfo.cachePath = Application.temporaryCachePath;#if ENABLE_DEBUG            Debug.Log("InitInfo: activity: " + initInfo.activity + "\n");            Debug.Log("InitInfo: assetManager: " + initInfo.assetManager + "\n");            Debug.Log("InitInfo: cachePath: " + initInfo.cachePath + "\n");#endif#else            initInfo.assetPath = Application.streamingAssetsPath;#endif            initInfo.useAnalytics = useAnalytics ? 1 : 0;            initInfo.useWatermark = useWatermark ? 1 : 0;            initInfo.licenseId = licenseId;            initInfo.allowExclusiveModeAudio = allowExclusiveModeAudio ? 1 : 0;            bool result = InitSDK(ref initInfo);#if ENABLE_DEBUG            Debug.Log("OZO Native SDK - initialized: " + result + "\n");#endif            if (result)            {#if ENABLE_DEBUG                for (int i=0; i<(int)OZO.Feature.COUNT; ++i)                {                    Debug.Log("This device supports: " + ((OZO.Feature)i).ToString()+": " + IsFeatureSupported((OZO.Feature)i).ToString() );                }#endif                //start the rendering                renderFunc = GetRenderFunc();            }        }    }    //Create the textures on the Unity side    public bool InitSDK(ref OZOInitInfo initInfo)    {        bool res = false;        try        {            res = OZO_InitSDK(ref initInfo);        }        catch (DllNotFoundException e)        {            Debug.LogError("OZOPlayerSDK library, or one of its dependencies is missing.\n" + e.ToString());        }        return res;    }    /////////////////////////////////////////////////////////////////    // External DLL    /////////////////////////////////////////////////////////////////#if UNITY_IPHONE && !UNITY_EDITOR        private const System.String OZO_PLAY_NATIVE = "__Internal";#elif (UNITY_ANDROID && !UNITY_EDITOR)    private const System.String OZO_PLAY_NATIVE = "OZOPlayerUnity";#else    private const System.String OZO_PLAY_NATIVE = "OZOPlayerUnity";#endif    private const System.String OZO_DBG = "OZO: ";    //////////////////////////////////////////////////////////////////////////    // Player Interface    //////////////////////////////////////////////////////////////////////////    [StructLayout(LayoutKind.Sequential, Pack = 1)]    public class OZOInitInfo    {        public System.IntPtr texturePtr0;        public System.IntPtr texturePtr1;        public System.IntPtr depthTexturePtr0;        public System.IntPtr depthTexturePtr1;        public int width;        public int height;        [MarshalAs(UnmanagedType.LPStr)]        public string licenseId;        [MarshalAs(UnmanagedType.LPStr)]        public string storagePath;#if (UNITY_ANDROID && !UNITY_EDITOR)        public System.IntPtr activity;        public System.IntPtr assetManager;        [MarshalAs(UnmanagedType.LPStr)]        public string cachePath;#else        [MarshalAs(UnmanagedType.LPStr)]        public string assetPath;#endif        public int useAnalytics;        public int useWatermark;        public int allowExclusiveModeAudio;    }    [DllImport(OZO_PLAY_NATIVE)]    private static extern bool OZO_InitSDK(ref OZOInitInfo info);    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_DeinitSDK();    [DllImport(OZO_PLAY_NATIVE, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]    [return: MarshalAs(UnmanagedType.LPStr)]    private static extern string OZO_GetVersionNumber();    [DllImport(OZO_PLAY_NATIVE)]    private static extern bool OZO_IsFeatureSupported(OZO.Feature feature);    [DllImport(OZO_PLAY_NATIVE)]    private static extern bool OZO_IsInitialized();    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_SetTime(float t);    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_SetProjectionMatrix(float[] projectionMatrix, int eyeIdx);    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_SetEyeDistance(float distanceBetweenEyes, int eyeIdx);    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_SetHMDOrientation(float x, float y, float z, float w);    [DllImport(OZO_PLAY_NATIVE)]    private static extern IntPtr OZO_GetRenderEventFunc();    //////////////////////////////////////////////////////////////////////////    // PlaybackControls    //////////////////////////////////////////////////////////////////////////    [DllImport(OZO_PLAY_NATIVE)]    //public static extern void OZO_SetVideoPlaybackObserver(IntPtr fp);    public static extern void OZO_SetVideoPlaybackObserver(OZO.PlaybackObserverDelegate fp);    [DllImport(OZO_PLAY_NATIVE)]    private static extern OZO.VideoPlaybackState OZO_GetCurrentVideoPlaybackState();    [DllImport(OZO_PLAY_NATIVE)]    private static extern OZO.VideoPlaybackState OZO_PopCachedVideoPlaybackState();    [DllImport(OZO_PLAY_NATIVE)]    private static extern OZO.ErrorCodes OZO_GetLastError();    [DllImport(OZO_PLAY_NATIVE)]    public static extern bool OZO_LoadVideo([MarshalAs(UnmanagedType.LPStr)] string filepath);    [DllImport(OZO_PLAY_NATIVE)]    public static extern bool OZO_PlayLoaded();    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_Pause();    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_Resume();    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_Stop();    [DllImport(OZO_PLAY_NATIVE)]    private static extern bool OZO_IsSeekable();    [DllImport(OZO_PLAY_NATIVE)]    private static extern bool OZO_SeekTo(UInt64 milliSeconds);    [DllImport(OZO_PLAY_NATIVE)]    private static extern UInt64 OZO_ElapsedTime();    [DllImport(OZO_PLAY_NATIVE)]    private static extern UInt64 OZO_Duration();    //////////////////////////////////////////////////////////////////////////    /// Audio    //////////////////////////////////////////////////////////////////////////    [DllImport(OZO_PLAY_NATIVE)]    private static extern void OZO_SetAudioGain(float gain);}